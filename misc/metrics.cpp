 /* The smooth Class Library
  * Copyright (C) 1998-2003 Robert Kausch <robert.kausch@gmx.net>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the "Artistic License".
  *
  * THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
  * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
  * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. */

#include <smooth/metrics.h>
#include <smooth/definitions.h>
#include <smooth/stk.h>
#include <smooth/toolkit.h>
#include <smooth/messagebox.h>
#include <smooth/i18n.h>

int	 S::METRIC_TITLEBARHEIGHT;
int	 S::METRIC_TBBUTTONBOXOFFSETX;
int	 S::METRIC_TBBUTTONBOXOFFSETY;
int	 S::METRIC_TBBUTTONBOXWIDTH;
int	 S::METRIC_TBBUTTONBOXHEIGHT;
int	 S::METRIC_TBBUTTONSIZE;
int	 S::METRIC_TBBUTTONOFFSETX;
int	 S::METRIC_TBBUTTONOFFSETY;
int	 S::METRIC_TBTEXTOFFSETX;
int	 S::METRIC_TBTEXTOFFSETY;
int	 S::METRIC_TBICONSIZE;
int	 S::METRIC_TBICONOFFSET;

int	 S::METRIC_MENUBARHEIGHT;
int	 S::METRIC_MBTEXTOFFSETX;
int	 S::METRIC_MBTEXTOFFSETY;
int	 S::METRIC_MBENTRYSPACING;
int	 S::METRIC_MBENTRYHEIGHT;

int	 S::METRIC_ICONBARHEIGHT;
int	 S::METRIC_IBICONOFFSETX;
int	 S::METRIC_IBICONOFFSETY;
int	 S::METRIC_IBICONSIZE;
int	 S::METRIC_IBENTRYSPACING;
int	 S::METRIC_IBARROWOFFSETY;
int	 S::METRIC_IBARROWSIZEX;
int	 S::METRIC_IBARROWSIZEY;

int	 S::METRIC_STATUSBARHEIGHT;
int	 S::METRIC_SBTEXTOFFSETX;
int	 S::METRIC_SBTEXTOFFSETY;

int	 S::METRIC_PBTEXTOFFSETY;

int	 S::METRIC_GBTEXTOFFSETY;

int	 S::METRIC_POPUPENTRYSIZE;
int	 S::METRIC_POPUPARROWOFFSETY;

int	 S::METRIC_CHECKBOXOFFSETXY;
int	 S::METRIC_CHECKBOXTEXTOFFSETY;

int	 S::METRIC_OPTBOXOFFSETXY;
int	 S::METRIC_OPTBOXTEXTOFFSETY;

int	 S::METRIC_EDITBOXLINEHEIGHT;

int	 S::METRIC_COMBOBOXOFFSETX;
int	 S::METRIC_COMBOBOXARROWOFFSETY;
int	 S::METRIC_COMBOBOXARROWOFFSETX;
int	 S::METRIC_COMBOBOXTEXTOFFSETXY;

int	 S::METRIC_REGISTEROFFSETY;
int	 S::METRIC_REGISTERTEXTOFFSETX;
int	 S::METRIC_REGISTERTEXTOFFSETY;

int	 S::METRIC_TREEVIEWENTRYHEIGHT;

int	 S::METRIC_SLIDERAREAWIDTH;
int	 S::METRIC_SLIDERAREAHEIGHT;
int	 S::METRIC_SLIDERAREAOFFSETX;
int	 S::METRIC_SLIDERAREAOFFSETY;

int	 S::METRIC_LISTBOXENTRYHEIGHT;
int	 S::METRIC_LISTBOXTEXTOFFSETXY;
int	 S::METRIC_LISTBOXSBOFFSET;

void S::SetMetrics()
{
	HDC	 dc = GetContext(0);

#ifdef __WIN32__
	int	 dpiy = GetDeviceCaps(dc, LOGPIXELSY);
#endif

	FreeContext(0, dc);

#ifdef __WIN32__
	switch (dpiy)
	{
		default:
		case 96:
			METRIC_TITLEBARHEIGHT = 19;
			METRIC_TBBUTTONBOXOFFSETX = 39;
			METRIC_TBBUTTONBOXOFFSETY = 2;
			METRIC_TBBUTTONBOXWIDTH = 35;
			METRIC_TBBUTTONBOXHEIGHT = 13;
			METRIC_TBBUTTONSIZE = 7;
			METRIC_TBBUTTONOFFSETX = 4;
			METRIC_TBBUTTONOFFSETY = 5;
			METRIC_TBTEXTOFFSETX = 3;
			METRIC_TBTEXTOFFSETY = 2;
			METRIC_TBICONSIZE = 16;
			METRIC_TBICONOFFSET = 3;

			METRIC_MENUBARHEIGHT = 18;
			METRIC_MBTEXTOFFSETX = 12;
			METRIC_MBTEXTOFFSETY = 4;
			METRIC_MBENTRYSPACING = 9;
			METRIC_MBENTRYHEIGHT = 14;

			METRIC_ICONBARHEIGHT = 18;
			METRIC_IBICONOFFSETX = 12;
			METRIC_IBICONOFFSETY = 6;
			METRIC_IBICONSIZE = 12;
			METRIC_IBENTRYSPACING = 6;
			METRIC_IBARROWOFFSETY = 4;
			METRIC_IBARROWSIZEX = 7;
			METRIC_IBARROWSIZEY = 3;

			METRIC_STATUSBARHEIGHT = 16;
			METRIC_SBTEXTOFFSETX = 4;
			METRIC_SBTEXTOFFSETY = 1;

			METRIC_PBTEXTOFFSETY = 2;

			METRIC_GBTEXTOFFSETY = 7;

			METRIC_POPUPENTRYSIZE = 16;
			METRIC_POPUPARROWOFFSETY = 3;

			METRIC_CHECKBOXOFFSETXY = 3;
			METRIC_CHECKBOXTEXTOFFSETY = 1;

			METRIC_OPTBOXOFFSETXY = 3;
			METRIC_OPTBOXTEXTOFFSETY = 1;

			METRIC_EDITBOXLINEHEIGHT = 15;

			METRIC_COMBOBOXOFFSETX = 16;
			METRIC_COMBOBOXARROWOFFSETY = 8;
			METRIC_COMBOBOXARROWOFFSETX = 12;
			METRIC_COMBOBOXTEXTOFFSETXY = 3;

			METRIC_REGISTEROFFSETY = 19;
			METRIC_REGISTERTEXTOFFSETX = 7;
			METRIC_REGISTERTEXTOFFSETY = 2;

			METRIC_TREEVIEWENTRYHEIGHT = 16;

			METRIC_SLIDERAREAWIDTH = 9;
			METRIC_SLIDERAREAHEIGHT = 18;
			METRIC_SLIDERAREAOFFSETX = 4;
			METRIC_SLIDERAREAOFFSETY = 8;

			METRIC_LISTBOXENTRYHEIGHT = 15;
			METRIC_LISTBOXTEXTOFFSETXY = 2;
			METRIC_LISTBOXSBOFFSET = 16;

			break;
		case 120:
			METRIC_TITLEBARHEIGHT = 25;
			METRIC_TBBUTTONBOXOFFSETX = 46;
			METRIC_TBBUTTONBOXOFFSETY = 3;
			METRIC_TBBUTTONBOXWIDTH = 40;
			METRIC_TBBUTTONBOXHEIGHT = 16;
			METRIC_TBBUTTONSIZE = 8;
			METRIC_TBBUTTONOFFSETX = 5;
			METRIC_TBBUTTONOFFSETY = 6;
			METRIC_TBTEXTOFFSETX = 5;
			METRIC_TBTEXTOFFSETY = 3;
			METRIC_TBICONSIZE = 20;
			METRIC_TBICONOFFSET = 4;

			METRIC_MENUBARHEIGHT = 22;
			METRIC_MBTEXTOFFSETX = 13;
			METRIC_MBTEXTOFFSETY = 5;
			METRIC_MBENTRYSPACING = 10;
			METRIC_MBENTRYHEIGHT = 17;

			METRIC_ICONBARHEIGHT = 22;
			METRIC_IBICONOFFSETX = 14;
			METRIC_IBICONOFFSETY = 6;
			METRIC_IBICONSIZE = 16;
			METRIC_IBENTRYSPACING = 7;
			METRIC_IBARROWOFFSETY = 5;
			METRIC_IBARROWSIZEX = 9;
			METRIC_IBARROWSIZEY = 4;

			METRIC_STATUSBARHEIGHT = 19;
			METRIC_SBTEXTOFFSETX = 5;
			METRIC_SBTEXTOFFSETY = 1;

			METRIC_PBTEXTOFFSETY = 3;

			METRIC_GBTEXTOFFSETY = 8;

			METRIC_POPUPENTRYSIZE = 19;
			METRIC_POPUPARROWOFFSETY = 4;

			METRIC_CHECKBOXOFFSETXY = 4;
			METRIC_CHECKBOXTEXTOFFSETY = 2;

			METRIC_OPTBOXOFFSETXY = 4;
			METRIC_OPTBOXTEXTOFFSETY = 2;

			METRIC_EDITBOXLINEHEIGHT = 17;

			METRIC_COMBOBOXOFFSETX = 18;
			METRIC_COMBOBOXARROWOFFSETY = 9;
			METRIC_COMBOBOXARROWOFFSETX = 13;
			METRIC_COMBOBOXTEXTOFFSETXY = 4;

			METRIC_REGISTEROFFSETY = 22;
			METRIC_REGISTERTEXTOFFSETX = 8;
			METRIC_REGISTERTEXTOFFSETY = 3;

			METRIC_TREEVIEWENTRYHEIGHT = 18;

			METRIC_SLIDERAREAWIDTH = 11;
			METRIC_SLIDERAREAHEIGHT = 22;
			METRIC_SLIDERAREAOFFSETX = 5;
			METRIC_SLIDERAREAOFFSETY = 10;

			METRIC_LISTBOXENTRYHEIGHT = 18;
			METRIC_LISTBOXTEXTOFFSETXY = 3;
			METRIC_LISTBOXSBOFFSET = 18;

			SMOOTH::MessageBox("You have selected large fonts in the Windows settings.\nIt is not recommended to use large fonts with smooth applications.\n\nClick OK to continue.", "Information", MB_OK, IDI_INFORMATION);

			break;
	}
#endif
}

void S::SetMeasurement(int type)
{
	HDC	 dc = GetContext(0);

#ifdef __WIN32__
	int	 dpiy = GetDeviceCaps(dc, LOGPIXELSY);
#else
	int	 dpiy = 0;
#endif

	FreeContext(0, dc);

	switch (type)
	{
		case SMT_UNITS:
			switch (dpiy)
			{
				default:
				case 96:
					Setup::FontSize = 1.00;
					break;
				case 120:
					Setup::FontSize = 1.25;
					break;
			}
			break;
		default:
		case SMT_PIXELS:
			Setup::FontSize = 1.00;
			break;
	}
}
