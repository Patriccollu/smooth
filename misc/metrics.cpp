 /* The smooth Class Library
  * Copyright (C) 1998-2004 Robert Kausch <robert.kausch@gmx.net>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of "The Artistic License, Version 2.0".
  *
  * THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
  * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
  * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. */

#include <smooth/metrics.h>
#include <smooth/definitions.h>
#include <smooth/dialogs/messagebox.h>
#include <smooth/i18n.h>

S::Int	 S::METRIC_TITLEBARHEIGHT;
S::Int	 S::METRIC_TBBUTTONBOXOFFSETX;
S::Int	 S::METRIC_TBBUTTONBOXOFFSETY;
S::Int	 S::METRIC_TBBUTTONBOXWIDTH;
S::Int	 S::METRIC_TBBUTTONBOXHEIGHT;
S::Int	 S::METRIC_TBBUTTONSIZE;
S::Int	 S::METRIC_TBBUTTONOFFSETX;
S::Int	 S::METRIC_TBBUTTONOFFSETY;
S::Int	 S::METRIC_TBTEXTOFFSETX;
S::Int	 S::METRIC_TBTEXTOFFSETY;
S::Int	 S::METRIC_TBICONSIZE;
S::Int	 S::METRIC_TBICONOFFSET;

S::Int	 S::METRIC_MENUBARHEIGHT;
S::Int	 S::METRIC_MBTEXTOFFSETX;
S::Int	 S::METRIC_MBTEXTOFFSETY;
S::Int	 S::METRIC_MBENTRYSPACING;
S::Int	 S::METRIC_MBENTRYHEIGHT;

S::Int	 S::METRIC_IBICONOFFSETX;
S::Int	 S::METRIC_IBICONOFFSETY;
S::Int	 S::METRIC_IBICONSIZE;
S::Int	 S::METRIC_IBENTRYSPACING;
S::Int	 S::METRIC_IBARROWSIZEX;
S::Int	 S::METRIC_IBARROWSIZEY;

S::Int	 S::METRIC_STATUSBARHEIGHT;
S::Int	 S::METRIC_SBTEXTOFFSETX;
S::Int	 S::METRIC_SBTEXTOFFSETY;

S::Int	 S::METRIC_PBTEXTOFFSETY;

S::Int	 S::METRIC_GBTEXTOFFSETY;

S::Int	 S::METRIC_POPUPENTRYSIZE;
S::Int	 S::METRIC_POPUPARROWOFFSETY;

S::Int	 S::METRIC_CHECKBOXOFFSETXY;
S::Int	 S::METRIC_CHECKBOXTEXTOFFSETY;

S::Int	 S::METRIC_OPTBOXOFFSETXY;
S::Int	 S::METRIC_OPTBOXTEXTOFFSETY;

S::Int	 S::METRIC_EDITBOXLINEHEIGHT;

S::Int	 S::METRIC_COMBOBOXOFFSETX;
S::Int	 S::METRIC_COMBOBOXARROWOFFSETY;
S::Int	 S::METRIC_COMBOBOXARROWOFFSETX;
S::Int	 S::METRIC_COMBOBOXTEXTOFFSETXY;

S::Int	 S::METRIC_REGISTEROFFSETY;
S::Int	 S::METRIC_REGISTERTEXTOFFSETX;
S::Int	 S::METRIC_REGISTERTEXTOFFSETY;

S::Int	 S::METRIC_TREEVIEWENTRYHEIGHT;

S::Int	 S::METRIC_SLIDERAREAWIDTH;
S::Int	 S::METRIC_SLIDERAREAHEIGHT;
S::Int	 S::METRIC_SLIDERAREAOFFSETX;
S::Int	 S::METRIC_SLIDERAREAOFFSETY;

S::Int	 S::METRIC_LISTBOXENTRYHEIGHT;
S::Int	 S::METRIC_LISTBOXTEXTOFFSETXY;
S::Int	 S::METRIC_LISTBOXSBOFFSET;

S::Void S::SetMetrics()
{
#ifdef __WIN32__
	HDC	 dc = GetWindowDC(0);
	Int	 dpiy = GetDeviceCaps(dc, LOGPIXELSY);

	ReleaseDC(0, dc);
#else
	Int	 dpiy = 0;
#endif

	switch (dpiy)
	{
		default:
		case 96:
			METRIC_TITLEBARHEIGHT = 19;
			METRIC_TBBUTTONBOXOFFSETX = 39;
			METRIC_TBBUTTONBOXOFFSETY = 2;
			METRIC_TBBUTTONBOXWIDTH = 35;
			METRIC_TBBUTTONBOXHEIGHT = 13;
			METRIC_TBBUTTONSIZE = 7;
			METRIC_TBBUTTONOFFSETX = 4;
			METRIC_TBBUTTONOFFSETY = 5;
			METRIC_TBTEXTOFFSETX = 3;
			METRIC_TBTEXTOFFSETY = 2;
			METRIC_TBICONSIZE = 16;
			METRIC_TBICONOFFSET = 3;

			METRIC_MENUBARHEIGHT = 18;
			METRIC_MBTEXTOFFSETX = 12;
			METRIC_MBTEXTOFFSETY = 4;
			METRIC_MBENTRYSPACING = 9;
			METRIC_MBENTRYHEIGHT = 14;

			METRIC_IBICONOFFSETX = 12;
			METRIC_IBICONOFFSETY = 6;
			METRIC_IBICONSIZE = 12;
			METRIC_IBENTRYSPACING = 6;
			METRIC_IBARROWSIZEX = 7;
			METRIC_IBARROWSIZEY = 3;

			METRIC_STATUSBARHEIGHT = 16;
			METRIC_SBTEXTOFFSETX = 4;
			METRIC_SBTEXTOFFSETY = 1;

			METRIC_PBTEXTOFFSETY = 2;

			METRIC_GBTEXTOFFSETY = 7;

			METRIC_POPUPENTRYSIZE = 16;
			METRIC_POPUPARROWOFFSETY = 3;

			METRIC_CHECKBOXOFFSETXY = 3;
			METRIC_CHECKBOXTEXTOFFSETY = 1;

			METRIC_OPTBOXOFFSETXY = 3;
			METRIC_OPTBOXTEXTOFFSETY = 1;

			METRIC_EDITBOXLINEHEIGHT = 15;

			METRIC_COMBOBOXOFFSETX = 16;
			METRIC_COMBOBOXARROWOFFSETY = 8;
			METRIC_COMBOBOXARROWOFFSETX = 12;
			METRIC_COMBOBOXTEXTOFFSETXY = 3;

			METRIC_REGISTEROFFSETY = 19;
			METRIC_REGISTERTEXTOFFSETX = 7;
			METRIC_REGISTERTEXTOFFSETY = 2;

			METRIC_TREEVIEWENTRYHEIGHT = 16;

			METRIC_SLIDERAREAWIDTH = 9;
			METRIC_SLIDERAREAHEIGHT = 18;
			METRIC_SLIDERAREAOFFSETX = 4;
			METRIC_SLIDERAREAOFFSETY = 8;

			METRIC_LISTBOXENTRYHEIGHT = 15;
			METRIC_LISTBOXTEXTOFFSETXY = 2;
			METRIC_LISTBOXSBOFFSET = 16;

			break;
		case 120:
			METRIC_TITLEBARHEIGHT = 25;
			METRIC_TBBUTTONBOXOFFSETX = 46;
			METRIC_TBBUTTONBOXOFFSETY = 3;
			METRIC_TBBUTTONBOXWIDTH = 40;
			METRIC_TBBUTTONBOXHEIGHT = 16;
			METRIC_TBBUTTONSIZE = 8;
			METRIC_TBBUTTONOFFSETX = 5;
			METRIC_TBBUTTONOFFSETY = 6;
			METRIC_TBTEXTOFFSETX = 5;
			METRIC_TBTEXTOFFSETY = 3;
			METRIC_TBICONSIZE = 20;
			METRIC_TBICONOFFSET = 4;

			METRIC_MENUBARHEIGHT = 22;
			METRIC_MBTEXTOFFSETX = 13;
			METRIC_MBTEXTOFFSETY = 5;
			METRIC_MBENTRYSPACING = 10;
			METRIC_MBENTRYHEIGHT = 17;

			METRIC_IBICONOFFSETX = 14;
			METRIC_IBICONOFFSETY = 6;
			METRIC_IBICONSIZE = 16;
			METRIC_IBENTRYSPACING = 7;
			METRIC_IBARROWSIZEX = 9;
			METRIC_IBARROWSIZEY = 4;

			METRIC_STATUSBARHEIGHT = 19;
			METRIC_SBTEXTOFFSETX = 5;
			METRIC_SBTEXTOFFSETY = 1;

			METRIC_PBTEXTOFFSETY = 3;

			METRIC_GBTEXTOFFSETY = 8;

			METRIC_POPUPENTRYSIZE = 19;
			METRIC_POPUPARROWOFFSETY = 4;

			METRIC_CHECKBOXOFFSETXY = 4;
			METRIC_CHECKBOXTEXTOFFSETY = 2;

			METRIC_OPTBOXOFFSETXY = 4;
			METRIC_OPTBOXTEXTOFFSETY = 2;

			METRIC_EDITBOXLINEHEIGHT = 17;

			METRIC_COMBOBOXOFFSETX = 18;
			METRIC_COMBOBOXARROWOFFSETY = 9;
			METRIC_COMBOBOXARROWOFFSETX = 13;
			METRIC_COMBOBOXTEXTOFFSETXY = 4;

			METRIC_REGISTEROFFSETY = 22;
			METRIC_REGISTERTEXTOFFSETX = 8;
			METRIC_REGISTERTEXTOFFSETY = 3;

			METRIC_TREEVIEWENTRYHEIGHT = 18;

			METRIC_SLIDERAREAWIDTH = 11;
			METRIC_SLIDERAREAHEIGHT = 22;
			METRIC_SLIDERAREAOFFSETX = 5;
			METRIC_SLIDERAREAOFFSETY = 10;

			METRIC_LISTBOXENTRYHEIGHT = 18;
			METRIC_LISTBOXTEXTOFFSETXY = 3;
			METRIC_LISTBOXSBOFFSET = 18;

#ifdef __WIN32__
			GUI::Dialogs::QuickMessage("You have selected large fonts in the Windows settings.\nIt is not recommended to use large fonts with smooth applications.\n\nClick OK to continue.", "Information", MB_OK, IDI_INFORMATION);

#endif

			break;
	}
}

S::Void S::SetMeasurement(Int type)
{
#ifdef __WIN32__
	HDC	 dc = GetWindowDC(0);
	Int	 dpiy = GetDeviceCaps(dc, LOGPIXELSY);

	ReleaseDC(0, dc);
#else
	Int	 dpiy = 0;
#endif

	switch (type)
	{
		case SMT_UNITS:
			switch (dpiy)
			{
				default:
				case 96:
					Setup::FontSize = 1.00;
					break;
				case 120:
					Setup::FontSize = 1.25;
					break;
			}
			break;
		default:
		case SMT_PIXELS:
			Setup::FontSize = 1.00;
			break;
	}
}
